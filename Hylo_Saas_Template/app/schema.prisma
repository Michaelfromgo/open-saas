datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  sendNewsletter            Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  mealPreferences           UserMealPreferences?
  mealPlans                 MealPlan[]
  enabledTools              EnabledTools[]
  agentTasks                AgentTask[]
  lifeCoachGoals            LifeCoachGoal[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

model UserMealPreferences {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String          @unique

  calorieTarget             Int             @default(2000)
  mealsPerDay               Int             @default(3)
  dietType                  String[]        @default([])
  allergies                 String[]        @default([])
  cuisines                  String[]        @default([])
  prepTime                  String          @default("30 min")
  useLeftovers              Boolean         @default(true)
  repeatBreakfast           Boolean         @default(true)
  breakfastOptions          Int             @default(2)
  measurementSystem         String          @default("us")
}

model MealPlan {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  planData                  Json            // Stores the complete meal plan with recipes and nutritional info
}

model EnabledTools {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String
  
  toolName                  String
  enabled                   Boolean         @default(true)

  @@unique([userId, toolName])
}

model AgentTask {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  goalText                  String
  status                    String          @default("planning") // planning, executing, completed, error, stopped
  errorMessage              String?
  finalOutput               String?

  subtasks                  AgentSubTask[]
}

model AgentSubTask {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  task                      AgentTask       @relation(fields: [taskId], references: [id])
  taskId                    String

  stepNumber                Int
  tool                      String          // Name of the tool to use, e.g., "Search", "CrewAI-Research"
  status                    String          @default("pending") // pending, processing, completed, error, stopped
  toolInput                 Json?           // Input parameters for the tool
  toolOutput                Json?           // Output from the tool execution
  agentThought              String?         // Reasoning behind this step
  error                     String?         // Error message if execution failed
  isLeftoverFrom            String?         // If this is using leftovers, name of the source meal
  leftoverFor               String?         // If this meal makes leftovers, name of the target meal
}

model LifeCoachGoal {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  goalDescription           String
  targetDate                DateTime
  checkinFrequency          String          @default("daily")
  notificationPreferences   String          @default("in-app")
  
  dailyCheckins             DailyCheckin[]
  weeklySummaries           WeeklySummary[]
  chatMessages              LifeCoachChatMessage[]
}

model DailyCheckin {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  goal                      LifeCoachGoal   @relation(fields: [goalId], references: [id])
  goalId                    String

  checkinDate               DateTime        @default(now())
  actionCompleted           Boolean
  comments                  String?
}

model WeeklySummary {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  goal                      LifeCoachGoal   @relation(fields: [goalId], references: [id])
  goalId                    String

  weekStartDate             DateTime
  weekEndDate               DateTime
  summaryText               String
  motivationalMessage       String
  actionableTip             String
}

model LifeCoachChatMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  goal                      LifeCoachGoal   @relation(fields: [goalId], references: [id])
  goalId                    String

  sessionId                 String
  isUserMessage             Boolean         @default(true)
  content                   String
  metadata                  Json?           // For storing additional context/info
}